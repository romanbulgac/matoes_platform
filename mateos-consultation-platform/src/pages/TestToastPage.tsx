import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useAlert } from '@/hooks/use-alert';
import { useErrorHandler } from '@/hooks/use-error-handler';

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π Toast —Å–∏—Å—Ç–µ–º—ã
 * –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */
export function TestToastPage() {
  const alert = useAlert();
  const errorHandler = useErrorHandler();

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-8">
      <div className="max-w-4xl mx-auto space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>üß™ Toast System Test Page</CardTitle>
            <CardDescription>
              –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –±–∞–∑–µ shadcn/ui Toast
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã useAlert */}
            <div>
              <h3 className="text-lg font-semibold mb-3">–ë–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (useAlert)</h3>
              <div className="grid grid-cols-2 gap-3">
                <Button
                  onClick={() => alert.showSuccess('–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', '–£—Å–ø–µ—Ö')}
                  variant="default"
                  className="bg-green-600 hover:bg-green-700"
                >
                  ‚úÖ Success Toast
                </Button>
                
                <Button
                  onClick={() => alert.showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!', '–û—à–∏–±–∫–∞')}
                  variant="destructive"
                >
                  ‚ùå Error Toast
                </Button>
                
                <Button
                  onClick={() => alert.showWarning('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', '–í–Ω–∏–º–∞–Ω–∏–µ')}
                  variant="outline"
                  className="border-yellow-500 text-yellow-700 hover:bg-yellow-50"
                >
                  ‚ö†Ô∏è Warning Toast
                </Button>
                
                <Button
                  onClick={() => alert.showInfo('–ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}
                  variant="outline"
                  className="border-blue-500 text-blue-700 hover:bg-blue-50"
                >
                  ‚ÑπÔ∏è Info Toast
                </Button>
              </div>
            </div>

            {/* –ú–µ—Ç–æ–¥—ã errorHandler */}
            <div>
              <h3 className="text-lg font-semibold mb-3">Error Handler —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
              <div className="grid grid-cols-2 gap-3">
                <Button
                  onClick={() => errorHandler.showSuccess('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', '–£—Å–ø–µ—Ö')}
                  variant="default"
                >
                  ‚úÖ Handler Success
                </Button>
                
                <Button
                  onClick={() => errorHandler.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', '–û—à–∏–±–∫–∞')}
                  variant="destructive"
                >
                  ‚ùå Handler Error
                </Button>
                
                <Button
                  onClick={() => errorHandler.showWarning('–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')}
                  variant="outline"
                >
                  ‚ö†Ô∏è Handler Warning
                </Button>
                
                <Button
                  onClick={() => errorHandler.showInfo('–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∞–ª—Å—è', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}
                  variant="outline"
                >
                  ‚ÑπÔ∏è Handler Info
                </Button>
              </div>
            </div>

            {/* –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ */}
            <div>
              <h3 className="text-lg font-semibold mb-3">–°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫</h3>
              <div className="grid grid-cols-2 gap-3">
                <Button
                  onClick={() => {
                    const error = new Error('Network timeout');
                    (error as any).status = 408;
                    errorHandler.handleError(error);
                  }}
                  variant="outline"
                >
                  üåê Network Error
                </Button>
                
                <Button
                  onClick={() => {
                    const error = new Error('Unauthorized');
                    (error as any).status = 401;
                    errorHandler.handleAuthError(error);
                  }}
                  variant="outline"
                >
                  üîí Auth Error
                </Button>
                
                <Button
                  onClick={() => {
                    const error = new Error('Validation failed');
                    (error as any).status = 422;
                    errorHandler.handleValidationError(error);
                  }}
                  variant="outline"
                >
                  üìã Validation Error
                </Button>
                
                <Button
                  onClick={() => {
                    const error = new Error('Server error');
                    (error as any).status = 500;
                    errorHandler.handleError(error);
                  }}
                  variant="outline"
                >
                  üî• Server Error
                </Button>
              </div>
            </div>

            {/* –¢–µ—Å—Ç —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é */}
            <div>
              <h3 className="text-lg font-semibold mb-3">–ö–∞—Å—Ç–æ–º–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
              <div className="grid grid-cols-3 gap-3">
                <Button
                  onClick={() => alert.showSuccess('–ë—ã—Å—Ç—Ä–æ–µ (1 —Å–µ–∫)', '–¢–µ—Å—Ç', 1000)}
                  variant="outline"
                  size="sm"
                >
                  ‚ö° 1 —Å–µ–∫—É–Ω–¥–∞
                </Button>
                
                <Button
                  onClick={() => alert.showInfo('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (5 —Å–µ–∫)', '–¢–µ—Å—Ç', 5000)}
                  variant="outline"
                  size="sm"
                >
                  ‚è±Ô∏è 5 —Å–µ–∫—É–Ω–¥
                </Button>
                
                <Button
                  onClick={() => alert.showWarning('–î–æ–ª–≥–æ–µ (10 —Å–µ–∫)', '–¢–µ—Å—Ç', 10000)}
                  variant="outline"
                  size="sm"
                >
                  ‚è≥ 10 —Å–µ–∫—É–Ω–¥
                </Button>
              </div>
            </div>

            {/* –ú–∞—Å—Å–æ–≤—ã–π —Ç–µ—Å—Ç */}
            <div>
              <h3 className="text-lg font-semibold mb-3">–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç</h3>
              <Button
                onClick={() => {
                  alert.showInfo('–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...', '–®–∞–≥ 1');
                  setTimeout(() => alert.showInfo('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...', '–®–∞–≥ 2'), 500);
                  setTimeout(() => alert.showWarning('–ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', '–®–∞–≥ 3'), 1000);
                  setTimeout(() => alert.showSuccess('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', '–®–∞–≥ 4'), 1500);
                }}
                variant="outline"
                className="w-full"
              >
                üöÄ –ü–æ–∫–∞–∑–∞—Ç—å 4 Toast –ø–æ–¥—Ä—è–¥
              </Button>
            </div>

            {/* –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ toast */}
            <div>
              <h3 className="text-lg font-semibold mb-3">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</h3>
              <Button
                onClick={() => {
                  alert.toast({
                    title: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π Toast",
                    description: "–≠—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π toast —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.",
                    duration: 0, // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π
                  });
                }}
                variant="outline"
                className="w-full"
              >
                üé® –ö–∞—Å—Ç–æ–º–Ω—ã–π Toast (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π)
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Card>
          <CardHeader>
            <CardTitle>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span className="text-gray-600">–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞:</span>
              <span className="font-semibold">shadcn/ui Toast (Radix UI)</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Hook:</span>
              <span className="font-semibold">useAlert() / useErrorHandler()</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">–ü–æ–∑–∏—Ü–∏—è:</span>
              <span className="font-semibold">Top-right (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ)</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">–ê–Ω–∏–º–∞—Ü–∏—è:</span>
              <span className="font-semibold">CSS Transitions (–Ω–∞—Ç–∏–≤–Ω—ã–µ)</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">–°—Ç–∞—Ç—É—Å:</span>
              <span className="font-semibold text-green-600">‚úÖ –ê–∫—Ç–∏–≤–Ω–∞</span>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
