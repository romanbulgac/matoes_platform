// –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
import {
    LoginRequestDto,
    LoginResponse,
    RegisterRequestDto,
    RegisterResponse,
    TokenRequestDto,
} from '../types/api';
import type {
    DeviceInfoDto,
    SessionDto
} from '../types/security';
import { convertKeysToPascalCase } from '../utils/caseConverter';
import { apiClient } from './api';

export class AuthService {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async register(data: RegisterRequestDto): Promise<RegisterResponse> {
    const result = await apiClient.post<RegisterResponse>('/auth/register', data);
    console.log('‚úÖ AuthService register result:', result);
    
    // ‚ö†Ô∏è Register –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏!
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ token
    if (result.token) {
      apiClient.setToken(result.token);
    }
    return result;
  }

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  static async login(data: LoginRequestDto): Promise<LoginResponse> {
    const result = await apiClient.post<LoginResponse>('/auth/login', data);
    console.log('‚úÖ AuthService login result:', result);
    
    if (result.success && result.token) {
      apiClient.setToken(result.token);
    }
    return result;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  static async refreshToken(data: TokenRequestDto): Promise<LoginResponse> {
    const result = await apiClient.post<LoginResponse>('/auth/refresh-token', data);
    if (result.token) {
      apiClient.setToken(result.token);
    }
    return result;
  }

  // –û—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–∞
  // üîê SECURITY: Nu mai trimitem refreshToken ca parametru
  // Backend-ul √Æl va citi automat din HttpOnly cookie
  static async revokeToken(): Promise<void> {
    await apiClient.post('/auth/revoke-token', {});
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  // üîê SECURITY: ApelƒÉm endpoint-ul de logout care clear-uie»ôte cookie-ul HttpOnly
  static async logout(): Promise<void> {
    try {
      await apiClient.post('/auth/logout', {});
    } catch (error) {
      console.error('Error during logout API call:', error);
      // ContinuƒÉm cu local cleanup chiar dacƒÉ API call-ul e»ôueazƒÉ
    } finally {
      // √éntotdeauna curƒÉ»õƒÉm token-ul local
      apiClient.clearToken();
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  static isAuthenticated(): boolean {
    return !!localStorage.getItem('authToken');
  }

  // –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
  static async changePassword(currentPassword: string, newPassword: string): Promise<void> {
    const data = {
      CurrentPassword: currentPassword,
      NewPassword: newPassword,
    };
    await apiClient.post('/auth/change-password', data);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static getCurrentUser(): string | null {
    return localStorage.getItem('user');
  }

  // ========== DEVICE TRACKING METHODS ==========

  /**
   * –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
   * @param credentials - Email –∏ –ø–∞—Ä–æ–ª—å
   * @param deviceInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
   * @param rememberDevice - –ó–∞–ø–æ–º–Ω–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
   */
  static async loginWithDeviceInfo(
    credentials: LoginRequestDto,
    deviceInfo: DeviceInfoDto,
    rememberDevice = false
  ): Promise<LoginResponse> {
    const loginData = {
      ...credentials,
      ...deviceInfo,
      rememberDevice,
    };

    console.log('üîç Login Data (camelCase):', JSON.stringify(loginData, null, 2));
    
    // Convert to PascalCase for C# backend
    const loginDataPascalCase = convertKeysToPascalCase(loginData);
    
    console.log('üîç Login Data (PascalCase for backend):', JSON.stringify(loginDataPascalCase, null, 2));

    const result = await apiClient.post<LoginResponse>(
      '/auth/login',
      loginDataPascalCase
    );
    
    console.log('‚úÖ AuthService loginWithDeviceInfo result:', result);

    if (result.success && result.token) {
      apiClient.setToken(result.token);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
      if (result.session) {
        this.setCurrentSession(result.session);
      }
    }

    return result;
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
   * @param userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param deviceInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
   */
  static async registerWithDeviceInfo(
    userData: RegisterRequestDto,
    deviceInfo: DeviceInfoDto
  ): Promise<RegisterResponse> {
    const registerData = {
      ...userData,
      ...deviceInfo,
    };

    console.log('üîç Register Data (camelCase):', JSON.stringify(registerData, null, 2));
    
    // Convert to PascalCase for C# backend
    const registerDataPascalCase = convertKeysToPascalCase(registerData);
    
    console.log('üîç Register Data (PascalCase for backend):', JSON.stringify(registerDataPascalCase, null, 2));

    const result = await apiClient.post<RegisterResponse>(
      '/auth/register',
      registerDataPascalCase
    );
    
    console.log('‚úÖ AuthService registerWithDeviceInfo result:', result);

    // ‚ö†Ô∏è Register –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success/session —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ token
    if (result.token) {
      apiClient.setToken(result.token);
    }

    return result;
  }

  // ========== SESSION MANAGEMENT ==========

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏–∑ localStorage
   */
  static getCurrentSession(): SessionDto | null {
    try {
      const sessionStr = localStorage.getItem('currentSession');
      return sessionStr ? JSON.parse(sessionStr) : null;
    } catch (error) {
      console.error('Error parsing session:', error);
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –≤ localStorage
   */
  static setCurrentSession(session: SessionDto): void {
    try {
      localStorage.setItem('currentSession', JSON.stringify(session));
    } catch (error) {
      console.error('Error saving session:', error);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
   */
  static clearSession(): void {
    localStorage.removeItem('currentSession');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–æ–≤—ã–º
   */
  static isNewDevice(): boolean {
    const session = this.getCurrentSession();
    return session?.isNewDevice ?? false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º
   */
  static isTrustedDevice(): boolean {
    const session = this.getCurrentSession();
    return session?.isTrusted ?? false;
  }
}
