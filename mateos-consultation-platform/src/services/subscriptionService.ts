/**
 * SubscriptionService - –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
 * 
 * Backend: SubscriptionsController.cs
 * 
 * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–ª–∏ Parent (—Ä–æ–¥–∏—Ç–µ–ª–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –¥–ª—è –¥–µ—Ç–µ–π)
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π (Stripe, PayPal) —á–µ—Ä–µ–∑ dependency injection
 * 
 * @author Mateos Platform
 * @version 2.0 - Refactored for SubscriptionsController
 * @date October 2025
 */

import type {
    BillingPortalResultDto,
    CancelSubscriptionRequestDto,
    CreateSubscriptionCheckoutDto,
    ParentChildDto,
    ParentSubscriptionDto,
    SubscriptionCheckoutResultDto,
    SubscriptionOperationResultDto,
    SubscriptionPlanInfoDto,
    SubscriptionUsageStatsDto,
    SyncResultDto,
    UpdateUserSubscriptionDto,
    UserSubscriptionStatusDto,
} from '@/types';
import { apiClient } from './api';

export class SubscriptionService {
  private static readonly BASE_PATH = '/Subscriptions';

  // ========================================
  // SUBSCRIPTION PLANS (Public Access)
  // ========================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫
   * 
   * Backend: GET /Subscriptions/plans
   * Authorization: AllowAnonymous (–ø—É–±–ª–∏—á–Ω—ã–π endpoint)
   * 
   * @returns –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
   * 
   * @example
   * const plans = await SubscriptionService.getAvailablePlans();
   * plans.forEach(plan => {
   *   console.log(`${plan.name}: ${plan.price} RON/–º–µ—Å—è—Ü`);
   * });
   */
  static async getAvailablePlans(): Promise<SubscriptionPlanInfoDto[]> {
    console.log('üîµ Fetching available subscription plans');
    
    try {
      const plans = await apiClient.get<SubscriptionPlanInfoDto[]>(
        `${this.BASE_PATH}/plans`
      );
      
      console.log(`‚úÖ Found ${plans.length} subscription plans`);
      return plans;
    } catch (error) {
      console.error('‚ùå Error getting subscription plans:', error);
      throw error;
    }
  }

  /**
   * Alias pentru getAvailablePlans pentru compatibilitate
   */
  static async getPlans(): Promise<SubscriptionPlanInfoDto[]> {
    return this.getAvailablePlans();
  }

  /**
   * Alias pentru getSubscriptionStatus pentru compatibilitate
   */
  static async getStatus(): Promise<UserSubscriptionStatusDto> {
    return this.getSubscriptionStatus();
  }

  // ========================================
  // CHECKOUT & PURCHASE (Parent Only)
  // ========================================

  /**
   * –°–æ–∑–¥–∞—Ç—å checkout —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
   * 
   * Backend: POST /Subscriptions/create-checkout
   * Authorization: Parent, Administrator, Admin
   * 
   * –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º (Stripe, PayPal, etc.)
   * –¢–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π
   * 
   * @param data - –î–∞–Ω–Ω—ã–µ –¥–ª—è checkout (planId, successUrl, cancelUrl)
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Å URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ checkout
   * 
   * @example
   * const result = await SubscriptionService.createCheckoutSession({
   *   planId: 'plan_abc123',
   *   successUrl: 'https://example.com/success',
   *   cancelUrl: 'https://example.com/cancel'
   * });
   * 
   * // Redirect to checkout
   * window.location.href = result.checkoutUrl;
   */
  static async createCheckoutSession(
    data: CreateSubscriptionCheckoutDto
  ): Promise<SubscriptionCheckoutResultDto> {
    console.log('üîµ Creating checkout session for plan:', data.planId);
    
    try {
      const result = await apiClient.post<SubscriptionCheckoutResultDto>(
        `${this.BASE_PATH}/create-checkout`,
        data
      );
      
      console.log('‚úÖ Checkout session created:', result.checkoutUrl);
      return result;
    } catch (error) {
      console.error('‚ùå Error creating checkout session:', error);
      throw error;
    }
  }

  // ========================================
  // SUBSCRIPTION STATUS & MANAGEMENT
  // ========================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * 
   * Backend: GET /Subscriptions/status
   * Authorization: Authenticated
   * 
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
   * - –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ null
   * - –î–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞
   * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   * - –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
   * 
   * @returns –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * 
   * @example
   * const status = await SubscriptionService.getSubscriptionStatus();
   * if (status.hasActiveSubscription) {
   *   console.log('Plan:', status.planName);
   *   console.log('Expires:', status.currentPeriodEnd);
   * }
   */
  static async getSubscriptionStatus(): Promise<UserSubscriptionStatusDto> {
    console.log('üîµ Fetching subscription status');
    
    try {
      const status = await apiClient.get<UserSubscriptionStatusDto>(
        `${this.BASE_PATH}/status`
      );
      
      console.log('‚úÖ Subscription status:', status.hasActiveSubscription ? 'Active' : 'None');
      return status;
    } catch (error) {
      console.error('‚ùå Error getting subscription status:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
   * 
   * Backend: POST /Subscriptions/cancel
   * Authorization: Parent, Administrator, Admin
   * 
   * –¢–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.
   * –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
   * 
   * @param reason - –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
   * 
   * @example
   * await SubscriptionService.cancelSubscription('No longer needed');
   */
  static async cancelSubscription(
    reason?: string
  ): Promise<SubscriptionOperationResultDto> {
    console.log('üîµ Cancelling subscription');
    
    try {
      const request: CancelSubscriptionRequestDto = {
        reason: reason || 'User request'
      };
      
      const result = await apiClient.post<SubscriptionOperationResultDto>(
        `${this.BASE_PATH}/cancel`,
        request
      );
      
      console.log('‚úÖ Subscription cancelled');
      return result;
    } catch (error) {
      console.error('‚ùå Error cancelling subscription:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (—Å–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω)
   * 
   * Backend: PUT /Subscriptions/update
   * Authorization: Parent, Administrator, Admin
   * 
   * –¢–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.
   * 
   * @param data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–π planId)
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
   * 
   * @example
   * await SubscriptionService.updateSubscription({
   *   newPlanId: 'plan_premium'
   * });
   */
  static async updateSubscription(
    data: UpdateUserSubscriptionDto
  ): Promise<SubscriptionOperationResultDto> {
    console.log('üîµ Updating subscription to plan:', data.newPlanId);
    
    try {
      const result = await apiClient.put<SubscriptionOperationResultDto>(
        `${this.BASE_PATH}/update`,
        data
      );
      
      console.log('‚úÖ Subscription updated');
      return result;
    } catch (error) {
      console.error('‚ùå Error updating subscription:', error);
      throw error;
    }
  }

  // ========================================
  // BILLING PORTAL
  // ========================================

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é billing portal –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
   * 
   * Backend: POST /Subscriptions/billing-portal
   * Authorization: Parent, Administrator, Admin
   * 
   * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π:
   * - –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂–Ω—ã–π –º–µ—Ç–æ–¥
   * - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
   * - –°–∫–∞—á–∞—Ç—å —Å—á–µ—Ç–∞
   * 
   * @returns URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ billing portal
   * 
   * @example
   * const result = await SubscriptionService.createBillingPortalSession();
   * window.location.href = result.portalUrl;
   */
  static async createBillingPortalSession(): Promise<BillingPortalResultDto> {
    console.log('üîµ Creating billing portal session');
    
    try {
      const result = await apiClient.post<BillingPortalResultDto>(
        `${this.BASE_PATH}/billing-portal`,
        {}
      );
      
      console.log('‚úÖ Billing portal session created');
      return result;
    } catch (error) {
      console.error('‚ùå Error creating billing portal session:', error);
      throw error;
    }
  }

  // ========================================
  // USAGE & PREMIUM ACCESS
  // ========================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
   * 
   * Backend: GET /Subscriptions/usage
   * Authorization: Authenticated
   * 
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
   * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
   * - –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
   * - –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è
   * - –õ–∏–º–∏—Ç—ã –ø–ª–∞–Ω–∞
   * 
   * @returns –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   * 
   * @example
   * const usage = await SubscriptionService.getUsageStats();
   * console.log(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${usage.consultationsUsed} / ${usage.consultationsLimit}`);
   */
  static async getUsageStats(): Promise<SubscriptionUsageStatsDto> {
    console.log('üîµ Fetching subscription usage stats');
    
    try {
      const usage = await apiClient.get<SubscriptionUsageStatsDto>(
        `${this.BASE_PATH}/usage`
      );
      
      console.log('‚úÖ Usage stats:', usage);
      return usage;
    } catch (error) {
      console.error('‚ùå Error getting usage stats:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ premium —Ñ—É–Ω–∫—Ü–∏—è–º
   * 
   * Backend: GET /Subscriptions/can-access-premium
   * Authorization: Authenticated
   * 
   * @returns true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å premium —Ñ—É–Ω–∫—Ü–∏–∏
   * 
   * @example
   * const canAccess = await SubscriptionService.canAccessPremium();
   * if (canAccess) {
   *   // Show premium features
   * }
   */
  static async canAccessPremium(): Promise<boolean> {
    console.log('üîµ Checking premium access');
    
    try {
      const result = await apiClient.get<{ canAccessPremium: boolean }>(
        `${this.BASE_PATH}/can-access-premium`
      );
      
      console.log('‚úÖ Premium access:', result.canAccessPremium);
      return result.canAccessPremium;
    } catch (error) {
      console.error('‚ùå Error checking premium access:', error);
      return false;
    }
  }

  // ========================================
  // STRIPE SYNC (Manual Synchronization)
  // ========================================

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º (Stripe)
   * 
   * Backend: POST /Subscriptions/sync
   * Authorization: Authenticated
   * 
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ webhook –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
   * 
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * 
   * @example
   * const result = await SubscriptionService.syncWithProvider();
   * if (result.success) {
   *   console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
   * }
   */
  static async syncWithProvider(): Promise<SyncResultDto> {
    console.log('üîµ Syncing subscription with payment provider');
    
    try {
      const result = await apiClient.post<SyncResultDto>(
        `${this.BASE_PATH}/sync`,
        {}
      );
      
      console.log('‚úÖ Sync completed');
      return result;
    } catch (error) {
      console.error('‚ùå Error syncing with provider:', error);
      throw error;
    }
  }

  // ========================================
  // PARENT-STUDENT SUBSCRIPTION MODEL (NEW)
  // ========================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
   * 
   * Backend: GET /Subscriptions/parent/has-children
   * Authorization: Parent
   * 
   * NEW: Parent-Student model
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
   * 
   * @returns –°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π —Å –∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
   * 
   * @example
   * const children = await SubscriptionService.getParentChildren();
   * children.forEach(child => {
   *   console.log(`${child.name}: ${child.hasActiveSubscription ? '–ï—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞' : '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏'}`);
   * });
   */
  static async getParentChildren(): Promise<ParentChildDto[]> {
    console.log('üîµ Fetching parent children list');
    
    try {
      const children = await apiClient.get<ParentChildDto[]>(
        `${this.BASE_PATH}/parent/has-children`
      );
      
      console.log(`‚úÖ Found ${children.length} children`);
      return children;
    } catch (error) {
      console.error('‚ùå Error getting parent children:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—è (–æ–¥–Ω–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞)
   * 
   * Backend: GET /Subscriptions/parent/subscriptions
   * Authorization: Parent
   * 
   * NEW: Parent-Student model
   * –†–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–æ–∫ - –ø–æ –æ–¥–Ω–æ–π –Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞
   * –ö–∞–∂–¥–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   * 
   * @returns –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ–±—ë–Ω–∫—É
   * 
   * @example
   * const subscriptions = await SubscriptionService.getParentSubscriptions();
   * subscriptions.forEach(sub => {
   *   console.log(`${sub.studentName}: ${sub.consultationsUsed}/${sub.maxConsultationsPerMonth} –∑–∞–Ω—è—Ç–∏–π`);
   * });
   */
  static async getParentSubscriptions(): Promise<ParentSubscriptionDto[]> {
    console.log('üîµ Fetching all parent subscriptions');
    
    try {
      const subscriptions = await apiClient.get<ParentSubscriptionDto[]>(
        `${this.BASE_PATH}/parent/subscriptions`
      );
      
      console.log(`‚úÖ Found ${subscriptions.length} subscriptions`);
      return subscriptions;
    } catch (error) {
      console.error('‚ùå Error getting parent subscriptions:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
   * 
   * Backend: GET /Subscriptions/student/{studentId}/status
   * Authorization: Parent (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–±—ë–Ω–∫–æ–º —ç—Ç–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è)
   * 
   * NEW: Parent-Student model
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞ - —Ä–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤–æ–∏—Ö –¥–µ—Ç–µ–π
   * 
   * @param studentId - ID —Å—Ç—É–¥–µ–Ω—Ç–∞
   * @returns –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
   * 
   * @example
   * const status = await SubscriptionService.getStudentSubscriptionStatus('student-guid');
   * if (status.hasActiveSubscription) {
   *   console.log(`–ü–ª–∞–Ω: ${status.planName}`);
   * }
   */
  static async getStudentSubscriptionStatus(studentId: string): Promise<UserSubscriptionStatusDto> {
    console.log('üîµ Fetching subscription status for student:', studentId);
    
    try {
      const status = await apiClient.get<UserSubscriptionStatusDto>(
        `${this.BASE_PATH}/student/${studentId}/status`
      );
      
      console.log('‚úÖ Student subscription status:', status.hasActiveSubscription ? 'Active' : 'None');
      return status;
    } catch (error) {
      console.error('‚ùå Error getting student subscription status:', error);
      throw error;
    }
  }
}
